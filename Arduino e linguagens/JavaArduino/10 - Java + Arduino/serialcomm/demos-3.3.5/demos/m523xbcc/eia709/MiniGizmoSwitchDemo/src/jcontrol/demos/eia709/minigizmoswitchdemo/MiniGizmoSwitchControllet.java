package jcontrol.demos.eia709.minigizmoswitchdemo;
/*
 * MiniGizmoSwitchDemo.java
 * Copyright (C) 2000-2007 DOMOLOGIC Home Automation GmbH
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.Â  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 */

import java.io.IOException;
import jcontrol.comm.eia709.Eia709Address;
import jcontrol.comm.eia709.Eia709Controllet;
import jcontrol.comm.eia709.Eia709NetworkVariable;
import jcontrol.comm.eia709.Eia709Node;
import jcontrol.comm.nv.NetworkVariableEvent;
import jcontrol.comm.nv.NetworkVariableListener;
import jcontrol.demos.eia709.common.Eia709NetworkVariableSwitch;
import jcontrol.io.Console;
import jcontrol.lang.ThreadExt;

/**
 * The MiniGizmoSwitchDemo can be used to toggle the Mini-Gizmo Kits, that are programmed
 * with the LampDemo. It will toggle the LEDs each 1000ms.
 * Because the LampDemo of the Mini-Gizmo Kits are using the ISI protocol (Interoperable
 * Self-InstallationPlease), make sure that the MiniGizmo Kit has been linked to another
 * MiniGizmo board. Otherwise the board will not have valid Network Variables Selectors.
 * You may read the "Mini EVK FT Quit Start Guide".
 *
 * Please modify the
 *
 * @author Lorenz Witte
 */
public class MiniGizmoSwitchControllet implements Eia709Controllet, NetworkVariableListener, Runnable {

  // The state selector and switch selector are generated by the ISI protocol, used by the
  // LampDemo. You may have to modify the values according to your configuration.
  // Please use a bus scanner to get the values of the selectors.
  public static final int NVI_STATE_SELECTOR  = 11645;
  public static final int NVO_SWITCH_SELECTOR = 11646;

  // The group id used by the LampDemo is always 128
  public static final int NVO_SWITCH_GROUP = 128;

  /**
   * node this program runs on
   */
  private Eia709Node m_node;

  /**
   * Toggling this variable causes the lamp to be turned
   * on/off.
   */
  private Eia709NetworkVariableSwitch m_nvoSwitch;

  /**
   * This network variable reports the lamp state.
   */
  private Eia709NetworkVariableSwitch m_nviState;

  private boolean m_running = false;

  private Thread m_thread;

  /** Supplies static binding information. */
  public void bind() {
    // set nv selector for switch ("nvoSwitch")
    m_nvoSwitch.setSelector( NVO_SWITCH_SELECTOR );

    // set nv selector for state ("nviState")
    m_nviState.setSelector( NVI_STATE_SELECTOR );

    // set group address for nvoSwitch
    Eia709Address addr = Eia709Address.createAddressType1( m_node, NVO_SWITCH_GROUP );
    m_nvoSwitch.setAddress(addr);
  }

  /** Creates network variables */
  public void configure(Eia709Node node) {
    m_node = node;

      // create nvoSwitch
    m_nvoSwitch = new Eia709NetworkVariableSwitch( m_node, "nvoSwitch",
        Eia709NetworkVariable.MOD_DIR_OUTGOING | Eia709NetworkVariable.MOD_SYNC |
        Eia709NetworkVariable.MOD_SERVICE_ACKD,
        "This network variable acts as a lamp switch.");

    // create nviState and attach listener
    m_nviState = new Eia709NetworkVariableSwitch( m_node, "nviState",
        Eia709NetworkVariable.MOD_DIR_INCOMING | Eia709NetworkVariable.MOD_SYNC |
        Eia709NetworkVariable.MOD_SERVICE_ACKD,
        "This network variable acts as lamp status");

    m_nviState.setListener( this);
  }

  /** Returns program name (8 bytes). */
  public byte[] getProgramName() {
    return new byte[] { 'S', 'W', 'I', 'T', 'C', 'H', '0', '0'};
  }

  /** Starts the program. */
  public void start() {
    m_thread = new Thread( this);
    m_running = true;
    m_thread.start();
  }

  /** Stops the program. */
  public void stop() {
    m_running = false;
    m_thread.interrupt();
  }

  /** Main function. */
  public void run() {
    while ( m_running) {
      try {
        // wait for 1000ms
        ThreadExt.sleep(1000);
        // set switch state to max intensity (100%)
        m_nvoSwitch.setState( Eia709NetworkVariableSwitch.STATE_ON, 100.0F);
        Console.out.println( "MiniGizmoSwitchControllet: switch on");

        // wait again for 1000ms
        ThreadExt.sleep(1000);
        //
        m_nvoSwitch.setState( Eia709NetworkVariableSwitch.STATE_OFF);
        Console.out.println( "MiniGizmoSwitchControllet: switch off");
      } catch (InterruptedException e) {
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

  /** Is called when the light state is changed. */
  public void networkVariableChanged(NetworkVariableEvent event) {
    if ( (event.getType() & NetworkVariableEvent.VALUE_CHANGED) != 0) {
      Console.out.println( "SwitchControllet: light state changed");
    }
  }

  public static void main(String[] args) {

      // create node
    Eia709Node node = new Eia709Node( new byte[] {'N', 'O', 'D', 'E', '0', '2'} );

    // create node address
    node.setNodeAddress( new byte[] { 'I', 'S', 'I' }, 10, 10);

      // install controllet
    node.setControllet( new MiniGizmoSwitchControllet());

      // start node
    node.start();
  }

}
